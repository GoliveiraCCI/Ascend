generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:Guil08121998*@localhost:3306/ascend"
}

model department {
  id              String            @id
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  code            String            @unique(map: "Department_code_key")
  description     String?
  employee        employee[]
  employeehistory employeehistory[]
  position        position[]
  training        training[]
}

model employee {
  id                  String                @id
  name                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  active              Boolean               @default(true)
  address             String?
  birthDate           DateTime
  cpf                 String                @unique(map: "Employee_cpf_key")
  departmentId        String
  email               String                @unique(map: "Employee_email_key")
  hireDate            DateTime
  phone               String?
  positionId          String
  terminationDate     DateTime?
  matricula           String                @unique(map: "Employee_matricula_key")
  shiftId             String?
  positionLevelId     String?
  onMedicalLeave      Boolean               @default(false)
  department          department            @relation(fields: [departmentId], references: [id], map: "Employee_departmentId_fkey")
  position            position              @relation(fields: [positionId], references: [id], map: "Employee_positionId_fkey")
  positionlevel       positionlevel?        @relation(fields: [positionLevelId], references: [id], map: "Employee_positionLevelId_fkey")
  shift               shift?                @relation(fields: [shiftId], references: [id], map: "Employee_shiftId_fkey")
  employeehistory     employeehistory[]
  evaluation          evaluation[]
  medicalleave        medicalleave[]
  trainingparticipant trainingparticipant[]

  @@index([active], map: "Employee_active_idx")
  @@index([departmentId], map: "Employee_departmentId_idx")
  @@index([positionId], map: "Employee_positionId_idx")
  @@index([positionLevelId], map: "Employee_positionLevelId_idx")
  @@index([shiftId], map: "Employee_shiftId_idx")
  @@index([terminationDate], map: "Employee_terminationDate_idx")
}

model employeehistory {
  id              String         @id
  employeeId      String
  positionLevelId String?
  departmentId    String?
  shiftId         String?
  startDate       DateTime
  endDate         DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  department      department?    @relation(fields: [departmentId], references: [id], map: "EmployeeHistory_departmentId_fkey")
  employee        employee       @relation(fields: [employeeId], references: [id], map: "EmployeeHistory_employeeId_fkey")
  positionlevel   positionlevel? @relation(fields: [positionLevelId], references: [id], map: "EmployeeHistory_positionLevelId_fkey")
  shift           shift?         @relation(fields: [shiftId], references: [id], map: "EmployeeHistory_shiftId_fkey")

  @@index([departmentId], map: "EmployeeHistory_departmentId_fkey")
  @@index([employeeId], map: "EmployeeHistory_employeeId_fkey")
  @@index([positionLevelId], map: "EmployeeHistory_positionLevelId_fkey")
  @@index([shiftId], map: "EmployeeHistory_shiftId_fkey")
}

model evaluation {
  id                      String             @id
  employeeId              String
  status                  String             @default("Pendente")
  createdAt               DateTime           @default(now())
  updatedAt               DateTime
  date                    DateTime
  evaluatorId             String
  managerEvaluation       Boolean            @default(false)
  managerEvaluationStatus String             @default("Pendente")
  managerGoals            String?
  managerImprovements     String?
  managerStrengths        String?
  selfEvaluation          Boolean            @default(false)
  selfEvaluationStatus    String             @default("Pendente")
  selfGoals               String?
  selfImprovements        String?
  selfStrengths           String?
  templateId              String
  finalScore              Float?
  managerEvaluationDate   DateTime?
  managerScore            Float?
  selfEvaluationDate      DateTime?
  selfScore               Float?
  employee                employee           @relation(fields: [employeeId], references: [id], map: "Evaluation_employeeId_fkey")
  user                    user               @relation(fields: [evaluatorId], references: [id], map: "Evaluation_evaluatorId_fkey")
  evaluationtemplate      evaluationtemplate @relation(fields: [templateId], references: [id], map: "Evaluation_templateId_fkey")
  evaluationanswer        evaluationanswer[]
  notification            notification[]

  @@index([employeeId], map: "Evaluation_employeeId_idx")
  @@index([evaluatorId], map: "Evaluation_evaluatorId_idx")
  @@index([status], map: "Evaluation_status_idx")
  @@index([templateId], map: "Evaluation_templateId_idx")
}

model evaluationanswer {
  id                 String             @id
  evaluationId       String
  questionId         String
  selfScore          Float?
  managerScore       Float?
  selfComment        String?            @db.Text
  managerComment     String?            @db.Text
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  evaluation         evaluation         @relation(fields: [evaluationId], references: [id], map: "EvaluationAnswer_evaluationId_fkey")
  evaluationquestion evaluationquestion @relation(fields: [questionId], references: [id], map: "EvaluationAnswer_questionId_fkey")

  @@unique([evaluationId, questionId], map: "EvaluationAnswer_evaluationId_questionId_key")
  @@index([evaluationId], map: "EvaluationAnswer_evaluationId_idx")
  @@index([questionId], map: "EvaluationAnswer_questionId_idx")
}

model evaluationcategory {
  id                 String               @id
  name               String
  description        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  evaluationquestion evaluationquestion[]
}

model evaluationquestion {
  id          String       @id
  categoryId  String
  category    evaluationcategory @relation(fields: [categoryId], references: [id])
  templateId  String?
  template    evaluationtemplate? @relation("TemplateQuestions", fields: [templateId], references: [id])
  text        String
  answers     evaluationanswer[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime

  @@index([categoryId])
  @@index([templateId])
}

model evaluationtemplate {
  id          String       @id
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  evaluation  evaluation[]
  questions   evaluationquestion[] @relation("TemplateQuestions")
}

model file {
  id             String       @id
  name           String
  type           String
  url            String
  medicalLeaveId String
  createdAt      DateTime     @default(now())
  medicalleave   medicalleave @relation(fields: [medicalLeaveId], references: [id], map: "File_medicalLeaveId_fkey")

  @@index([medicalLeaveId], map: "File_medicalLeaveId_fkey")
}

model medicalleave {
  id                   String                @id
  employeeId           String
  startDate            DateTime
  endDate              DateTime
  days                 Int
  reason               String
  status               String                @default("AFASTADO")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  doctor               String?
  hospital             String?
  notes                String?
  categoryId           String?
  file                 file[]
  medicalleavecategory medicalleavecategory? @relation(fields: [categoryId], references: [id], map: "MedicalLeave_categoryId_fkey")
  employee             employee              @relation(fields: [employeeId], references: [id], map: "MedicalLeave_employeeId_fkey")

  @@index([categoryId], map: "MedicalLeave_categoryId_fkey")
  @@index([employeeId], map: "MedicalLeave_employeeId_fkey")
}

model medicalleavecategory {
  id           String         @id
  name         String
  description  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  medicalleave medicalleave[]
}

model notification {
  id           String      @id
  userId       String
  type         String
  message      String
  read         Boolean     @default(false)
  createdAt    DateTime    @default(now())
  evaluationId String?
  evaluation   evaluation? @relation(fields: [evaluationId], references: [id], map: "Notification_evaluationId_fkey")
  user         user        @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([evaluationId], map: "Notification_evaluationId_idx")
  @@index([userId], map: "Notification_userId_idx")
}

model position {
  id            String          @id
  title         String
  departmentId  String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  description   String?
  employee      employee[]
  department    department      @relation(fields: [departmentId], references: [id], map: "Position_departmentId_fkey")
  positionlevel positionlevel[]

  @@index([departmentId], map: "Position_departmentId_fkey")
}

model positionlevel {
  id              String            @id
  name            String
  salary          Float
  positionId      String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  employee        employee[]
  employeehistory employeehistory[]
  position        position          @relation(fields: [positionId], references: [id], map: "PositionLevel_positionId_fkey")

  @@index([positionId], map: "PositionLevel_positionId_fkey")
}

model shift {
  id              String            @id
  name            String
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  employee        employee[]
  employeehistory employeehistory[]
}

model training {
  id                  String                @id
  name                String
  category            String
  type                String?
  source              String
  instructor          String?
  institution         String?
  startDate           DateTime
  endDate             DateTime
  hours               Int
  status              String
  description         String?               @db.Text
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  departmentId        String?
  department          department?           @relation(fields: [departmentId], references: [id], map: "Training_departmentId_fkey")
  trainingevaluation  trainingevaluation[]
  trainingmaterial    trainingmaterial[]
  trainingparticipant trainingparticipant[]
  trainingphoto       trainingphoto[]
  trainingsession     trainingsession[]

  @@index([departmentId], map: "Training_departmentId_fkey")
}

model trainingevaluation {
  id           String   @id
  trainingId   String
  type         String
  date         DateTime
  averageScore Float?
  notes        String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  training     training @relation(fields: [trainingId], references: [id], map: "TrainingEvaluation_trainingId_fkey")

  @@index([trainingId], map: "TrainingEvaluation_trainingId_fkey")
}

model trainingmaterial {
  id         String   @id
  trainingId String
  name       String
  type       String
  url        String
  size       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  training   training @relation(fields: [trainingId], references: [id], map: "TrainingMaterial_trainingId_fkey")

  @@index([trainingId], map: "TrainingMaterial_trainingId_fkey")
}

model trainingparticipant {
  id         String   @id
  trainingId String
  employeeId String
  status     String
  score      Float?
  notes      String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  employee   employee @relation(fields: [employeeId], references: [id], map: "TrainingParticipant_employeeId_fkey")
  training   training @relation(fields: [trainingId], references: [id], map: "TrainingParticipant_trainingId_fkey")

  @@unique([trainingId, employeeId], map: "TrainingParticipant_trainingId_employeeId_key")
  @@index([employeeId], map: "TrainingParticipant_employeeId_fkey")
}

model trainingphoto {
  id         String   @id
  trainingId String
  url        String
  caption    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  training   training @relation(fields: [trainingId], references: [id], map: "TrainingPhoto_trainingId_fkey")

  @@index([trainingId], map: "TrainingPhoto_trainingId_fkey")
}

model trainingsession {
  id          String   @id
  trainingId  String
  date        DateTime
  startTime   String
  endTime     String
  topic       String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  training    training @relation(fields: [trainingId], references: [id], map: "TrainingSession_trainingId_fkey")

  @@index([trainingId], map: "TrainingSession_trainingId_fkey")
}

model user {
  id            String         @id
  name          String?
  email         String?        @unique(map: "User_email_key")
  password      String?
  role          String         @default("USER")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  emailVerified DateTime?
  image         String?
  evaluation    evaluation[]
  notification  notification[]
}
